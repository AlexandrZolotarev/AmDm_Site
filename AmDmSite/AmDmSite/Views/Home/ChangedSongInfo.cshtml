@using AmDmSite.Models.SiteDataBase
@model Song
<link href="~/Content/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/bootstrap/css/bootstrap-tokenfield.min.css" rel="stylesheet" />
<link href="~/Content/bootstrap/css/tokenfield-typeahead.min.css" rel="stylesheet" />
@Scripts.Render("~/bundles/bootstrap");

<div class="col-md-8">
    <div class="h2__info">Текст:</div>
    @using (Html.BeginForm("ChangeSong", "Home", FormMethod.Post))
    {
        @Html.ValidationSummary(true);
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.PerformerId)
    <div class="text">
    @Html.TextAreaFor(m => m.Text, 40, 30, new { style = "width: 100%; max-width: 100%;" })
    </div>
    <button type="submit" class="btn btn-default btn-mine">
        <span class="fi-save">Сохранить</span>
    </button>
    }
</div>

    

<div class="col-md-4">
    <h2>Аппликатуры аккордов</h2>
    <ul class="Accords">
        @foreach (var accord in Model.Accords)
            {
            <li>
                <a class="photo" id="photo"><img src=@accord.PathToPicture title=@accord.Name width="80"> </a>
            </li>
        }

    </ul>
    @Html.TextBoxFor(m => m.Text, new { @class = "form-control", @id = "tokenfield" })
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            var token = [];
            var engine;
            $.get("GetTag", function (response) {
                $.each(response.data, function (i, v) {
                    token.push({ value: v });
                    console.log(v);
                });
                engine = new Bloodhound({
                    local: token,
                    datumTokenizer: function (d) {
                        return Bloodhound.tokenizers.whitespace(d.value);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace

                });
                engine.initialize();
                console.log(token);
                $('#tokenfield').on('tokenfield:createtoken', function (e) {
                    var data = e.attrs.value.split('|')
                    e.attrs.value = data[1] || data[0]
                    e.attrs.label = data[1] ? data[0] + ' (' + data[1] + ')' : data[0]
                }).on('tokenfield:createdtoken', function (e) {
                    var re = /\S+\S+\.\S+/
                    var valid = re.test(e.attrs.value)
                    if (!valid) {
                        $(e.relatedTarget).addClass('invalid')
                    }
                }).on('tokenfield:edittoken', function (e) {
                    if (e.attrs.label !== e.attrs.value) {
                        var label = e.attrs.label.split(' (')
                        e.attrs.value = label[0] + '|' + e.attrs.value
                    }
                }).on('tokenfield:removedtoken', function (e) {
                }).tokenfield({
                    typeahead: [null, { source: engine.ttAdapter() }]
                });
            });
        });

    </script>
}